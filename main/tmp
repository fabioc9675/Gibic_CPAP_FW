//todo
#include "driver/mcpwm.h"
#include "soc/mcpwm_periph.h"

// Definir los pines de conexión
#define GPIO_PWM0A_OUT 21   // PWMA
#define GPIO_PWM0B_OUT 47   // PWMB
#define GPIO_PWM0C_OUT 48   // PWMC

void init_mcpwm()
{
    // Inicializar MCPWM
    printf("Inicializando MCPWM...\n");

    // Configurar los pines GPIO para PWM
    mcpwm_gpio_init(MCPWM_UNIT_0, MCPWM0A, GPIO_PWM0A_OUT);
    mcpwm_gpio_init(MCPWM_UNIT_0, MCPWM1A, GPIO_PWM0B_OUT);
    mcpwm_gpio_init(MCPWM_UNIT_0, MCPWM2A, GPIO_PWM0C_OUT);

    // Configurar MCPWM
    mcpwm_config_t pwm_config;
    pwm_config.frequency = 1000;    // Frecuencia PWM: 1kHz
    pwm_config.cmpr_a = 0;          // Ciclo de trabajo inicial de PWM0A
    pwm_config.cmpr_b = 0;          // Ciclo de trabajo inicial de PWM0B
    pwm_config.cmpr_c = 0;          // Ciclo de trabajo inicial de PWM0C
    pwm_config.counter_mode = MCPWM_UP_COUNTER;
    pwm_config.duty_mode = MCPWM_DUTY_MODE_0;

    // Aplicar la configuración a MCPWM0
    mcpwm_init(MCPWM_UNIT_0, MCPWM_TIMER_0, &pwm_config);
}

void set_motor_speed(float duty_cycle)
{
    // Establecer el ciclo de trabajo para controlar la velocidad del motor
    mcpwm_set_duty(MCPWM_UNIT_0, MCPWM_TIMER_0, MCPWM_OPR_A, duty_cycle);
    mcpwm_set_duty(MCPWM_UNIT_0, MCPWM_TIMER_0, MCPWM_OPR_B, duty_cycle);
    mcpwm_set_duty(MCPWM_UNIT_0, MCPWM_TIMER_0, MCPWM_OPR_C, duty_cycle);

    // Actualizar el ciclo de trabajo
    mcpwm_set_duty_type(MCPWM_UNIT_0, MCPWM_TIMER_0, MCPWM_OPR_A, MCPWM_DUTY_MODE_0);
    mcpwm_set_duty_type(MCPWM_UNIT_0, MCPWM_TIMER_0, MCPWM_OPR_B, MCPWM_DUTY_MODE_0);
    mcpwm_set_duty_type(MCPWM_UNIT_0, MCPWM_TIMER_0, MCPWM_OPR_C, MCPWM_DUTY_MODE_0);
}

     // Inicializar MCPWM
    init_mcpwm();

    // Establecer la velocidad del motor (ciclo de trabajo)
    set_motor_speed(50.0); // 50% de ciclo de trabajo

    printf("Run!\n");


